#!/bin/bash --
# shellcheck disable=SC1004,SC2001,SC2016

# ファイル名 : convert_invoice
# 目的・用途 : GnuCash (>= 2.6.15)で作成した得意先請求書(HTMLファイル)を
#              日本の商慣習に対応したPDFファイルに変換
#
# 作者の名前 : 日柳 光久 <mikkun@mbg.nifty.com>
# ライセンス : MIT License

# 使い方 : ./convert_invoice [-o <前回請求額>] [-p <入金額>] <HTMLファイル>

# 返り値 : 0 - 正常終了
#          1 - 使用法または構文のエラー

#=============================================================================
# 使い方とバージョンを表示
#=============================================================================
USAGE() {
    cat << END_USAGE >&2
使い方     : ${0##*/} [-o <前回請求額>] [-p <入金額>] <HTMLファイル>
バージョン : Sun Feb  6 05:00:00 JST 2022
END_USAGE

    exit 1
}

#=============================================================================
# 初期設定
#=============================================================================
#-----------------------------------------------------------------------------
# 変数を定義
#-----------------------------------------------------------------------------
set -u
shopt -s expand_aliases

if [ "$(uname)" != 'Linux' ] ; then
    alias awk='gawk'
    alias date='gdate'
    alias fold='gfold'
    alias sed='gsed'
    alias tac='tail -r'
    alias tr='gtr'
fi

base_dir="$(cd "${0%/*}" && pwd)"
tmp="/tmp/$$"

# log_dir="$base_dir"

IFS="$(printf ' \t\n_')" ; IFS="${IFS%_}"
LANG='ja_JP.utf8'
PATH='/usr/bin:/bin'
export IFS LANG PATH

#-----------------------------------------------------------------------------
# エラーチェック用の関数を定義
#-----------------------------------------------------------------------------
ERROR_CHECK() {
    [ "$(echo "${PIPESTATUS[@]}" | tr -d ' 0')" = '' ] && return

    echo "${0##*/}: $1" >&2

    rm -f $tmp-*
    exit 1
}

#-----------------------------------------------------------------------------
# ログファイルにエラーを出力
#-----------------------------------------------------------------------------
# exec 2> "$log_dir/${0##*/}.$(date '+%Y%m%d%H%M%S').$$"
# set -vx

#=============================================================================
# メイン処理
#=============================================================================
#-----------------------------------------------------------------------------
# オプションを解析し、引数をチェック
#-----------------------------------------------------------------------------
[ "$#" -lt 1 ] || [ "$#" -gt 5 ] && USAGE

echo 0 > $tmp-opening
echo 0 > $tmp-paid

while getopts ':o:p:' opt ; do
    case "$opt" in
        o )
            opening="$OPTARG"
            echo -n "$opening" | grep -Eq '^-?[0-9]+$'
            ERROR_CHECK "$opening: 無効な前回請求額です"
            echo "$opening" > $tmp-opening
            ;;
        p )
            paid="$OPTARG"
            echo -n "$paid" | grep -Eq '^-?[0-9]+$'
            ERROR_CHECK "$paid: 無効な入金額です"
            echo "$paid" > $tmp-paid
            ;;
        * )
            USAGE
            ;;
    esac
done

shift $((OPTIND - 1))

filename="$*"
echo -n "$filename" | grep -Eiq '\.html?$'
ERROR_CHECK "$filename: 無効なHTMLファイルです"
[ -f "$filename" ]
ERROR_CHECK "$filename: そのようなファイルはありません"

#-----------------------------------------------------------------------------
# 作成者情報ファイル・テンプレートファイルの有無をチェック
#-----------------------------------------------------------------------------
[ -f "$base_dir/company.txt" ]
ERROR_CHECK "$base_dir/company.txt: そのようなファイルはありません"

[ -f "$base_dir/template.svg" ]
ERROR_CHECK "$base_dir/template.svg: そのようなファイルはありません"

echo "$filename: 得意先請求書を処理しています..." >&2

# HTMLファイルをテキストファイルに変換
sed '/class="entries-table"/s/border="0"/border="1"/' "$filename" |
w3m -T text/html -dump -cols 1024                                 > $tmp-input

#-----------------------------------------------------------------------------
# 得意先請求書のヘッダ部分にはめ込む一時ファイルを作成
#-----------------------------------------------------------------------------
cp -f "$base_dir/company.txt" $tmp-company

# 変換したテキストファイルからヘッダ部分を抽出
sed '1,/^┌/!d' $tmp-input | sed '$d' > $tmp-header

# 得意先請求書番号を生成
grep -E '^(得意先請求書番号: |請求書 #)[0-9]+$' $tmp-header |
tr -cd '\n0-9'                                              |
awk '{print "(請求No."$0")"}'                               > $tmp-invoice_id

# 提出先情報を生成
cp -f "$filename" $tmp-html
sed -i '/^<table border="0".*cellspacing="0">$/s/>/ class="client-table">/' \
    $tmp-html
sed -i -z 's/\( cellspacing="0"\) class="client-table">/\1>/' $tmp-html
sed '/class="client-table"/,/^<\/table>$/!d' $tmp-html |
sed 's/<br\( *\/\)\?>/\n/g;s/<[^>]*>//g' | sed '/^$/d' |
awk 'BEGIN{n=100}{if($1~/^〒/)n=0;print NR+n,$0}'      | # 1行目に郵便番号
sort -k1,1n                                            |
sed '/^101 /s/^/\n/'                                   | # 会社名の前に空行
sed 's/^[0-9]\+ //'                                    > $tmp-customer

# 得意先請求書締切日を生成
grep -E '^(得意先請求書| +)日付: +[0-9]{4}-' $tmp-header |
awk '{print $NF}'                                        |
date -f - '+%Y年 %_m月 %_d日 締切分'                     > $tmp-invoice_date

# 作成者情報・提出先情報の文字列を編集
sed -i 's/[!/\]/\\&/g' $tmp-{company,customer} # エスケープ処理

# 作成者情報・提出先情報のファイルについて、表示行数が8行未満でも8行に増やす
yes '' | head -n8 >> $tmp-company  ; sed -i '1,8!d' $tmp-company
yes '' | head -n8 >> $tmp-customer ; sed -i '1,8!d' $tmp-customer

#-----------------------------------------------------------------------------
# 得意先請求書のボディ部分にはめ込む一時ファイルを作成
#-----------------------------------------------------------------------------
# 変換したテキストファイルからタブ区切りのファイルを作成
# [$tmp-tsv] 1:日付 2:説明 3:数量 4:単価 5:合計
sed '/^┌/,/┘$/!d' $tmp-input           | # ボディ部分抽出
sed 's/│ \+│/│*│/g'                  | # 空白セル用ダミー
sed 's/│ \+/│/g;s/ \+│/│/g'          | # セル内容の前後の空白削除
grep -E '[0-9]{4}-[0-9]{2}-[0-9]{2}'     | # 計算単位「銭」で単価計算
awk 'BEGIN{FS="│";OFS="\t"}             \
          {gsub(/[^-0-9.]/,"",$5);       \
           gsub(/[^-0-9.]/,"",$9);       \
           $6=sprintf("%\047.2f",$9/$5); \
           sub(/\.00$/,"",$6);           \
           $5=sprintf("%\047d",$5);      \
           $9=sprintf("%\047d",$9);      \
           print $2,$3,$5,$6,$9}'        > $tmp-tsv

# 消費税額の記載の有無をチェック
grep -Eq $'\t[^\t]*消費税[^\t]*[０-９0-9]+[％%][^\t]*\t' $tmp-tsv
ERROR_CHECK "$filename: 消費税額の記載がありません"

# 売上について、フィールド項目に基づいてファイルを分割
awk 'BEGIN{FS="\t"}$2!~/.*消費税.*[０-９0-9]+[％%].*/' $tmp-tsv |
awk 'BEGIN{FS="\t"}NF==5{for(i=1;i<=5;i++){print $i > "'$tmp-body-'"i}}'

# 説明について、長過ぎるものは短縮し、後ろに短縮したことを示す"..."を付加
sed -i '/^.\{18\}.*※$/s/^\(.\{15\}\).*/\1... ※/' $tmp-body-2 # 軽減税率
sed -i '/^.\{18\}.*[^※]$/s/^\(.\{17\}\).*/\1.../' $tmp-body-2 # 標準税率

# 売上項目の内容に応じて文字列を編集
sed -i 's/-/\\\//g'    $tmp-body-1 # 日付表示(YYYY/MM/DD)
sed -i 's/[!/\]/\\&/g' $tmp-body-2 # エスケープ処理

# 前回請求額・入金額から繰越金額を計算
cat $tmp-{opening,paid}                                    |
awk 'NR==1{r1=$0}NR==2{r2=$0}END{printf "%\047d\n",r1-r2}' > $tmp-balance

# 合計から買上額を計算
tr -d ',' < $tmp-body-5                   |
awk '{sum+=$0}END{printf "%\047d\n",sum}' > $tmp-subtotal

# 消費税額を取得
awk 'BEGIN{FS="\t"}                                                    \
     $2~/.*消費税.*[０-９0-9]+[％%].*/{gsub(/[^-0-9.]/,"",$5);tax+=$5} \
     END{printf "%\047d\n",tax}'                                       \
    $tmp-tsv > $tmp-tax

# 繰越金額・買上額・消費税額から今回請求額を計算
cat $tmp-{balance,subtotal,tax}             |
tr -d ','                                   |
awk '{sum+=$0}END{printf "￥%\047d\n",sum}' > $tmp-amount_due

# 税率ごとに、買上額(税抜)・消費税額(端数切捨て)を計算
awk 'BEGIN{FS="\t"}$2!~/.*消費税.*[０-９0-9]+[％%].*/' $tmp-tsv             |
awk 'BEGIN{FS="\t";is_found_reduced=0;is_found_standard=0}                  \
     $2 ~/※$/{is_found_reduced =1;gsub(/[^-0-9.]/,"",$5);sum_reduced +=$5} \
     $2!~/※$/{is_found_standard=1;gsub(/[^-0-9.]/,"",$5);sum_standard+=$5} \
     END{if(is_found_reduced){                                              \
             printf "%\047d\n",sum_reduced      > "'$tmp-sum-reduced'";     \
             printf "%\047d\n",sum_reduced*0.08 > "'$tmp-tax-reduced'"}     \
         if(is_found_standard){                                             \
             printf "%\047d\n",sum_standard      > "'$tmp-sum-standard'";   \
             printf "%\047d\n",sum_standard*0.10 > "'$tmp-tax-standard'"}}'

# 税率ごとに区分した買上額・消費税額を売上項目のファイルそれぞれに追記
text_reduced='-------------------------------------'
[ -f $tmp-sum-reduced ] && [ -f $tmp-tax-reduced ] \
    && text_reduced='---------- ※は軽減税率対象 ---------'
echo '----------'    >> $tmp-body-1
echo "$text_reduced" >> $tmp-body-2
echo '-----------'   >> $tmp-body-3
echo '----------'    >> $tmp-body-4
echo '-------------' >> $tmp-body-5
if [ -f $tmp-sum-reduced ] && [ -f $tmp-tax-reduced ] ; then
    echo ''              >> $tmp-body-1
    echo ' 8.00% 対象:'  >> $tmp-body-2
    cat $tmp-sum-reduced >> $tmp-body-3
    echo '消費税:'       >> $tmp-body-4
    cat $tmp-tax-reduced >> $tmp-body-5
fi
if [ -f $tmp-sum-standard ] && [ -f $tmp-tax-standard ] ; then
    echo ''               >> $tmp-body-1
    echo '10.00% 対象:'   >> $tmp-body-2
    cat $tmp-sum-standard >> $tmp-body-3
    echo '消費税:'        >> $tmp-body-4
    cat $tmp-tax-standard >> $tmp-body-5
fi

# 売上項目のファイルそれぞれについて、表示行数が30行未満でも30行に増やす
seq 1 5                                                                     \
    | xargs -I@ echo                                                        \
      'yes "" | head -n30 >> '$tmp'-body-@ ; sed -i "1,30!d" '$tmp'-body-@' \
    | bash

#-----------------------------------------------------------------------------
# テンプレートファイルに各項目のデータをはめ込んで出力
#-----------------------------------------------------------------------------
cp -f "$base_dir/template.svg" $tmp-template

# 作成者情報をはめ込む
seq 1 8                                                      \
    | xargs -I@ echo                                         \
      'sed -i "/id=\"company@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-company)</"'                                     \
      $tmp'-template'                                        \
    | bash

# 提出先情報をはめ込む
seq 1 8                                                       \
    | xargs -I@ echo                                          \
      'sed -i "/id=\"customer@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-customer)</"'                                     \
      $tmp'-template'                                         \
    | bash

# 得意先請求書番号・得意先請求書締切日をはめ込む
sed -i '/id="invoice_id1"/,+3s/>[^<]*</>'"$(cat $tmp-invoice_id)"'</' \
    $tmp-template
sed -i '/id="invoice_date1"/,+3s/>[^<]*</>'"$(cat $tmp-invoice_date)"'</' \
    $tmp-template

# 日付をはめ込む
seq 1 30                                                  \
    | xargs -I@ echo                                      \
      'sed -i "/id=\"date@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-body-1)</"'                                   \
      $tmp'-template'                                     \
    | bash

# 説明をはめ込む
seq 1 30                                                         \
    | xargs -I@ echo                                             \
      'sed -i "/id=\"description@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-body-2)</"'                                          \
      $tmp'-template'                                            \
    | bash

# 数量をはめ込む
seq 1 30                                                      \
    | xargs -I@ echo                                          \
      'sed -i "/id=\"quantity@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-body-3)</"'                                       \
      $tmp'-template'                                         \
    | bash

# 単価をはめ込む
seq 1 30                                                        \
    | xargs -I@ echo                                            \
      'sed -i "/id=\"unit_price@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-body-4)</"'                                         \
      $tmp'-template'                                           \
    | bash

# 合計をはめ込む
seq 1 30                                                   \
    | xargs -I@ echo                                       \
      'sed -i "/id=\"total@\"/,+2s/>[^<]*</>$(awk "NR==@"' \
      $tmp'-body-5)</"'                                    \
      $tmp'-template'                                      \
    | bash

# 前回請求額・入金額をはめ込む
sed -i '/id="opening_balance1"/,+3s/>[^<]*</>'"$(awk \
    '{printf "%\047d\n",$0}' $tmp-opening)"'</'      \
    $tmp-template
sed -i '/id="paid1"/,+3s/>[^<]*</>'"$(awk    \
    '{printf "%\047d\n",$0}' $tmp-paid)"'</' \
    $tmp-template

# 繰越金額・買上額・消費税額・今回請求額をはめ込む
sed -i '/id="balance1"/,+3s/>[^<]*</>'"$(cat $tmp-balance)"'</' \
    $tmp-template
sed -i '/id="subtotal1"/,+3s/>[^<]*</>'"$(cat $tmp-subtotal)"'</' \
    $tmp-template
sed -i '/id="tax1"/,+3s/>[^<]*</>'"$(cat $tmp-tax)"'</' \
    $tmp-template
sed -i '/id="amount_due1"/,+3s/>[^<]*</>'"$(cat $tmp-amount_due)"'</' \
    $tmp-template

# InkscapeでSVGファイルをPDFファイルに変換
mv -f $tmp-template{,.svg} # 警告抑制のため、拡張子付加
inkscape_opt='-o' # Inkscape (>= 1.0)用オプション(デフォルト値)
inkscape -V 2> /dev/null | grep -Eq '^Inkscape 0\.' && inkscape_opt='-A'
inkscape $tmp-template.svg                                           \
         "$inkscape_opt"                                             \
         "$(echo "$filename" | sed 's/\.[Hh][Tt][Mm][Ll]\?$//').pdf" \
         2> /dev/null

echo "$filename: 得意先請求書の変換に成功しました" >&2

#=============================================================================
# 終了処理
#=============================================================================
rm -f $tmp-*
exit 0
